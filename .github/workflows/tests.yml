name: Run tests

on:
  push:
    branches:
      - rs/run-tests-on-gh
  pull_request:
    branches:
      - main

permissions:
    contents: read

env:
  DEFAULT_STORAGE_SERVICE: s3
  DEFAULT_STORAGE_BUCKET: lexy-ai-gha-testing-s3
  S3_TEST_BUCKET: lexy-ai-gha-testing-s3
  GCS_TEST_BUCKET: rs-lexy-ai-gcs-dev-deployments
#  DEFAULT_STORAGE_BUCKET: rs-lexy-ai-dev-deployments
#  S3_TEST_BUCKET: rs-lexy-ai-dev-deployments
#  GCS_TEST_BUCKET: rs-lexy-ai-gcs-dev-deployments
#  S3_TEST_BUCKET: lexy-ai-gha-testing-s3
# Uncomment the following if manually creating the Google Cloud credentials file
#  GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_credentials.json

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Free disk space
        run: df -h

      - name: List huge unnecessary tools folder
        run: |
          tree -L 2 /opt/hostedtoolcache
          du -sh /opt/hostedtoolcache/*/* | sort -h -r

      - name: Delete huge unnecessary tools folder
        run: |
          rm -rf /opt/hostedtoolcache
          df -h

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check build context
        run: |
          pwd
          ls -lah .
          tree -L 2 .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Check available builders
        run: docker buildx ls

      - name: Check Docker Buildx cache
        run: |
          mkdir -p /tmp/.buildx-cache
          ls -lah /tmp/.buildx-cache

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Check Docker Buildx cache
        run: |
          ls -lah /tmp/.buildx-cache

      - name: Check env
        run: env

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          output-credentials: true

      - name: Check output of AWS creds
        run: |
          echo ${{ steps.aws-creds.outputs }}
          ls -lah $HOME

      - name: Authenticate with Google Cloud
        id: gcloud-creds
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Check output of Google Cloud auth
        run: |
          echo ${{ steps.gcloud-creds.outputs.credentials_file_path }}

      - name: Check env again
        run: env

# Uncomment the following if manually creating the Google Cloud credentials file
#      - name: Create Google Cloud credentials file
#        run: |
#          echo '${{ secrets.GOOGLE_CREDENTIALS }}' > ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
#          ls -lah ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Create .env files
        run: |
          touch .env
          touch .env.test
          echo "DEFAULT_STORAGE_SERVICE=${{ env.DEFAULT_STORAGE_SERVICE }}" >> .env.test
          echo "DEFAULT_STORAGE_BUCKET=${{ env.DEFAULT_STORAGE_BUCKET }}" >> .env.test
          echo "S3_TEST_BUCKET=${{ env.S3_TEST_BUCKET }}" >> .env.test
          echo "GCS_TEST_BUCKET=${{ env.GCS_TEST_BUCKET }}" >> .env.test
          echo "PIPELINE_DIR=./pipelines" >> .env.test

      - name: Check docker compose config
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.test.yaml config

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/server/Dockerfile
          build-args: |
            ENVIRONMENT=test
          push: false
          load: true
          cache-from: type=registry,src=ghcr.io/lexy-ai/lexy/lx-server:latest
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Check Docker Buildx cache
        run: |
          ls -lah /tmp/.buildx-cache

      - name: Build worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/worker/Dockerfile
          build-args: |
            ENVIRONMENT=test
          push: false
          load: true
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Check Docker Buildx cache
        run: |
          ls -lah /tmp/.buildx-cache

      - name: Build postgres image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/postgres/Dockerfile
          build-args: |
            ENVIRONMENT=test
          push: false
          load: true
#          cache-from: type=local,src=/tmp/.buildx-cache
#          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Check Docker Buildx cache
        run: |
          ls -lah /tmp/.buildx-cache

      - name: Bring up the stack
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.test.yaml up -d
          docker compose -f docker-compose.yaml -f docker-compose.test.yaml ps

      - name: Run server tests
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.test.yaml exec -it lexyserver pytest -s lexy_tests

      - name: Run client tests
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.test.yaml exec -it lexyserver pytest -s sdk-python

# Uncomment the following if manually creating the Google Cloud credentials file
#      - name: Delete Google Cloud credentials file
#        if: always()
#        run: |
#          ls -lah ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
#          rm -f ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Check Docker Buildx cache
        run: |
          ls -lah /tmp/.buildx-cache

#      - # Temp fix
#        # https://github.com/docker/build-push-action/issues/252
#        # https://github.com/moby/buildkit/issues/1896
#        name: Move cache
#        run: |
#          rm -rf /tmp/.buildx-cache
#          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Check Docker Buildx cache
        run: |
          ls -lah /tmp/.buildx-cache

      - name: Tear down the stack
        if: always()
        run: |
          docker compose -f docker-compose.yaml -f docker-compose.test.yaml down
          rm -f .env
          rm -f .env.test
          
